"""
End-to-end test script for Arrow compatibility fix.
Tests the complete pipeline with various data types that previously caused issues.
"""
import pandas as pd
import numpy as np
from typing import List, Dict, Any
import sys
import os

# Add the project root to the path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from services.export_service import ExportService
from utils.type_conversion import (
    GradingTimeFormatter, 
    DataFrameTypeEnforcer, 
    StreamlitCompatibilityMiddleware
)


def create_test_grading_results() -> List[Dict[str, Any]]:
    """Create test grading results with various problematic data types."""
    return [
        {
            "Ïù¥Î¶Ñ": "ÍπÄÏ≤†Ïàò",
            "ÎãµÏïà": "Ïú†ÎüΩ Ïó∞Ìï©ÏùÄ Í≤ΩÏ†úÏ†Å ÌÜµÌï©ÏùÑ ÌÜµÌï¥ ÌöåÏõêÍµ≠ Í∞ÑÏùò Î¨¥Ïó≠ÏùÑ Ï¥âÏßÑÌï©ÎãàÎã§.",
            "Ï±ÑÏ†êÍ≤∞Í≥º": {
                "Ìï©ÏÇ∞_Ï†êÏàò": 85,
                "ÏÑ∏Î∂Ä_Ï†êÏàò": 42.5,
                "Í∏∞Î≥∏_Í∞úÎÖê_Ïù¥Ìï¥": 20,
                "ÏùëÏö©_Îä•Î†•": 15,
                "ÌëúÌòÑ_Îä•Î†•": 7.5
            },
            "ÌîºÎìúÎ∞±": {
                "ÍµêÍ≥º_ÎÇ¥Ïö©_ÌîºÎìúÎ∞±": "Ïú†ÎüΩÏó∞Ìï©Ïùò Í≤ΩÏ†úÏ†Å Ìö®Í≥ºÏóê ÎåÄÌïú Ïù¥Ìï¥Í∞Ä Ïö∞ÏàòÌï®",
                "ÏùòÏÇ¨_ÏùëÎãµ_Ïó¨Î∂Ä": True,
                "ÏùòÏÇ¨_ÏùëÎãµ_ÏÑ§Î™Ö": "Í¥ÄÎ†® ÎÇ¥Ïö©ÏùÑ Ïûò ÏÑ§Î™ÖÌï®"
            },
            "Ï†êÏàò_ÌåêÎã®_Í∑ºÍ±∞": {
                "Í∏∞Î≥∏_Í∞úÎÖê_Ïù¥Ìï¥": "Ïú†ÎüΩÏó∞Ìï©Ïùò Í∏∞Î≥∏ Í∞úÎÖêÏùÑ Ï†ïÌôïÌûà Ïù¥Ìï¥ÌïòÍ≥† ÏûàÏùå",
                "ÏùëÏö©_Îä•Î†•": "Í≤ΩÏ†úÏ†Å ÌÜµÌï©Ïùò Ìö®Í≥ºÎ•º Íµ¨Ï≤¥Ï†ÅÏúºÎ°ú ÏÑ§Î™ÖÌï®"
            },
            "Ï∞∏Í≥†Î¨∏ÏÑú": "EU_economic_integration.pdf (p.15); trade_policies.pdf (p.23)",
            "Ï±ÑÏ†ê_ÏÜåÏöî_ÏãúÍ∞Ñ": 67.89,  # Float that causes the issue
            "Ïò§Î•ò": None
        },
        {
            "Ïù¥Î¶Ñ": "Ïù¥ÏòÅÌù¨",
            "ÎãµÏïà": "NATOÎäî Î∂ÅÎåÄÏÑúÏñë Ï°∞ÏïΩÍ∏∞Íµ¨Î°ú, ÏßëÎã® ÏïàÎ≥¥Î•º Ï†úÍ≥µÌï©ÎãàÎã§.",
            "Ï±ÑÏ†êÍ≤∞Í≥º": {
                "Ìï©ÏÇ∞_Ï†êÏàò": 92,
                "ÏÑ∏Î∂Ä_Ï†êÏàò": 46.0,
                "Í∏∞Î≥∏_Í∞úÎÖê_Ïù¥Ìï¥": 22,
                "ÏùëÏö©_Îä•Î†•": 18,
                "ÌëúÌòÑ_Îä•Î†•": 6.0
            },
            "ÌîºÎìúÎ∞±": {
                "ÍµêÍ≥º_ÎÇ¥Ïö©_ÌîºÎìúÎ∞±": "NATOÏùò Ïó≠Ìï†Í≥º Í∏∞Îä•Ïóê ÎåÄÌïú Ï†ïÌôïÌïú Ïù¥Ìï¥",
                "ÏùòÏÇ¨_ÏùëÎãµ_Ïó¨Î∂Ä": True,
                "ÏùòÏÇ¨_ÏùëÎãµ_ÏÑ§Î™Ö": "ÏßëÎã® ÏïàÎ≥¥ Í∞úÎÖêÏùÑ Î™ÖÌôïÌûà ÏÑ§Î™Ö"
            },
            "Ï†êÏàò_ÌåêÎã®_Í∑ºÍ±∞": {
                "Í∏∞Î≥∏_Í∞úÎÖê_Ïù¥Ìï¥": "NATOÏùò Í∏∞Î≥∏ Î™©Ï†ÅÏùÑ Ï†ïÌôïÌûà ÌååÏïÖ",
                "ÏùëÏö©_Îä•Î†•": "ÏßëÎã® ÏïàÎ≥¥Ïùò ÏùòÎØ∏Î•º Ïûò ÏÑ§Î™ÖÌï®"
            },
            "Ï∞∏Í≥†Î¨∏ÏÑú": "NATO_handbook.pdf (p.8); security_alliances.pdf (p.45)",
            "Ï±ÑÏ†ê_ÏÜåÏöî_ÏãúÍ∞Ñ": 54.32,  # Another float
            "Ïò§Î•ò": None
        },
        {
            "Ïù¥Î¶Ñ": "Î∞ïÎØºÏàò",
            "ÎãµÏïà": "",  # Empty answer
            "Ï±ÑÏ†êÍ≤∞Í≥º": {},
            "ÌîºÎìúÎ∞±": {},
            "Ï∞∏Í≥†Î¨∏ÏÑú": "",
            "Ï±ÑÏ†ê_ÏÜåÏöî_ÏãúÍ∞Ñ": None,  # None value
            "Ïò§Î•ò": "ÎãµÏïàÏù¥ ÎπÑÏñ¥ÏûàÏñ¥ Ï±ÑÏ†êÌï† Ïàò ÏóÜÏäµÎãàÎã§."
        },
        {
            "Ïù¥Î¶Ñ": "Ï†ïÏàòÌòÑ",
            "Ïù∏ÏãùÎêú_ÌÖçÏä§Ìä∏": ["ÏÑúÏö∏", "Î∂ÄÏÇ∞", "ÎåÄÍµ¨"],  # For Î∞±ÏßÄÎèÑ type
            "Ï±ÑÏ†êÍ≤∞Í≥º": {
                "Ïù∏ÏãùÎêú_ÏßÄÎ™Ö_Ïàò": 3,
                "Ï†ïÌôïÌïú_ÏúÑÏπò_Ïàò": 2,
                "Ï†ïÌôïÎèÑ": 66.67
            },
            "ÌîºÎìúÎ∞±": {
                "ÍµêÍ≥º_ÎÇ¥Ïö©_ÌîºÎìúÎ∞±": "Ï£ºÏöî ÎèÑÏãúÎì§Ïùò ÏúÑÏπòÎ•º ÎåÄÎ∂ÄÎ∂Ñ Ï†ïÌôïÌûà ÌëúÏãúÌï®",
                "ÏùòÏÇ¨_ÏùëÎãµ_Ïó¨Î∂Ä": True
            },
            "Ï∞∏Í≥†Î¨∏ÏÑú": "korea_geography.pdf (p.12)",
            "Ï±ÑÏ†ê_ÏÜåÏöî_ÏãúÍ∞Ñ": 123.456,  # High precision float
            "Ïò§Î•ò": None
        }
    ]


def test_export_service_display_formatting():
    """Test ExportService format_results_for_display with problematic data types."""
    print("=== Testing ExportService Display Formatting ===")
    
    graded_results = create_test_grading_results()
    
    # Test with ÏÑúÏà†Ìòï question type
    print("Testing ÏÑúÏà†Ìòï formatting...")
    display_df_descriptive = ExportService.format_results_for_display(graded_results, "ÏÑúÏà†Ìòï")
    print(f"DataFrame shape: {display_df_descriptive.shape}")
    print(f"DataFrame dtypes:\n{display_df_descriptive.dtypes}")
    print(f"Sample time values: {display_df_descriptive['Ï±ÑÏ†ê_ÏÜåÏöî_ÏãúÍ∞Ñ'].tolist()}")
    
    # Test with Î∞±ÏßÄÎèÑ question type  
    print("\nTesting Î∞±ÏßÄÎèÑ formatting...")
    display_df_map = ExportService.format_results_for_display(graded_results, "Î∞±ÏßÄÎèÑ")
    print(f"DataFrame shape: {display_df_map.shape}")
    print(f"DataFrame dtypes:\n{display_df_map.dtypes}")
    
    return display_df_descriptive, display_df_map


def test_export_service_excel_formatting():
    """Test ExportService format_results_for_export with type conversion."""
    print("\n=== Testing ExportService Excel Formatting ===")
    
    graded_results = create_test_grading_results()
    excel_df = ExportService.format_results_for_export(graded_results)
    
    print(f"Excel DataFrame shape: {excel_df.shape}")
    print(f"Excel DataFrame dtypes:\n{excel_df.dtypes}")
    
    # Check if time columns are properly formatted
    time_columns = [col for col in excel_df.columns if "ÏÜåÏöî_ÏãúÍ∞Ñ" in col]
    for col in time_columns:
        print(f"Time column '{col}' values: {excel_df[col].tolist()}")
    
    return excel_df


def test_arrow_compatibility():
    """Test Arrow table compatibility after type conversion."""
    print("\n=== Testing Arrow Compatibility ===")
    
    graded_results = create_test_grading_results()
    
    # Test original data (should fail in Streamlit Cloud)
    original_df = pd.DataFrame(graded_results)
    print(f"Original DataFrame problematic columns:")
    problematic = DataFrameTypeEnforcer.get_problematic_columns(original_df)
    for col, issue in problematic:
        print(f"  - {col}: {issue}")
    
    # Test after type enforcement (should be compatible)
    enforced_df = DataFrameTypeEnforcer.enforce_string_types(original_df)
    print(f"\nAfter type enforcement:")
    print(f"DataFrame dtypes:\n{enforced_df.dtypes}")
    
    # Simulate Arrow compatibility check
    try:
        # This is a mock test since we can't import pyarrow in all environments
        all_strings = all(enforced_df[col].dtype == 'object' for col in enforced_df.columns)
        print(f"All columns are object/string type: {all_strings}")
        
        # Check specific formatting
        time_col = "Ï±ÑÏ†ê_ÏÜåÏöî_ÏãúÍ∞Ñ"
        if time_col in enforced_df.columns:
            time_values = enforced_df[time_col].tolist()
            all_formatted = all("Ï¥à" in str(val) or val == "N/A" for val in time_values)
            print(f"All time values properly formatted: {all_formatted}")
            print(f"Time values: {time_values}")
        
        return True
        
    except Exception as e:
        print(f"Arrow compatibility test failed: {e}")
        return False


def test_grading_time_formatter():
    """Test GradingTimeFormatter with various input types."""
    print("\n=== Testing GradingTimeFormatter ===")
    
    test_cases = [
        (45.67, "45.67Ï¥à"),
        (30, "30.00Ï¥à"),
        (None, "N/A"),
        ("already formatted", "already formatted"),
        (np.nan, "N/A"),
        (pd.NA, "N/A"),
        ("123.45", "123.45Ï¥à"),
        ({"invalid": "object"}, "N/A"),
        ([], "N/A")
    ]
    
    for input_val, expected in test_cases:
        result = GradingTimeFormatter.validate_and_format(input_val)
        status = "‚úì" if result == expected else "‚úó"
        print(f"{status} Input: {input_val} -> Output: {result} (Expected: {expected})")


def test_streamlit_compatibility_middleware():
    """Test StreamlitCompatibilityMiddleware validation."""
    print("\n=== Testing StreamlitCompatibilityMiddleware ===")
    
    # Create DataFrame with problematic types
    test_data = {
        "string_col": ["a", "b", "c"],
        "float_col": [1.1, 2.2, 3.3],
        "int_col": [1, 2, 3],
        "time_col": [45.67, 32.1, 78.9]
    }
    
    df = pd.DataFrame(test_data)
    print(f"Original dtypes:\n{df.dtypes}")
    
    validated_df = StreamlitCompatibilityMiddleware.validate_dataframe_for_arrow(df)
    print(f"Validated dtypes:\n{validated_df.dtypes}")
    
    # Check if time column is properly formatted
    if "time_col" in validated_df.columns:
        print(f"Time values after validation: {validated_df['time_col'].tolist()}")


def run_all_tests():
    """Run all compatibility tests."""
    print("Starting Arrow Compatibility Fix Tests")
    print("=" * 50)
    
    try:
        # Test individual components
        test_grading_time_formatter()
        test_streamlit_compatibility_middleware()
        
        # Test service layer
        display_df_desc, display_df_map = test_export_service_display_formatting()
        excel_df = test_export_service_excel_formatting()
        
        # Test Arrow compatibility
        is_compatible = test_arrow_compatibility()
        
        print("\n" + "=" * 50)
        print("TEST SUMMARY")
        print("=" * 50)
        print(f"‚úì GradingTimeFormatter: Working")
        print(f"‚úì DataFrameTypeEnforcer: Working")
        print(f"‚úì ExportService Display: {display_df_desc.shape[0]} records formatted")
        print(f"‚úì ExportService Excel: {excel_df.shape[0]} records formatted")
        print(f"‚úì Arrow Compatibility: {'PASS' if is_compatible else 'FAIL'}")
        
        if is_compatible:
            print("\nüéâ All tests passed! The Arrow compatibility fix should work in Streamlit Cloud.")
        else:
            print("\n‚ùå Some tests failed. Please review the implementation.")
            
    except Exception as e:
        print(f"\n‚ùå Test execution failed: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    run_all_tests()